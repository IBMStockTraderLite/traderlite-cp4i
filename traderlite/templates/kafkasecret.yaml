{{- if .Values.kafkaIntegration.enabled }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ .Release.Name }}-kafka-credentials
data:
{{ (.Files.Glob "certs/*.jks").AsSecrets | indent 2 }}

stringData:
  connect-standalone.properties: |
    key.converter=org.apache.kafka.connect.json.JsonConverter
    value.converter=org.apache.kafka.connect.json.JsonConverter
    key.converter.schemas.enable=true
    value.converter.schemas.enable=true
    offset.storage.file.filename=/tmp/connect.offsets
    #offset.flush.interval.ms=10000
    bootstrap.servers={{ .Values.kafkaAccess.bootstrapHost }}
    security.protocol=SASL_SSL
    ssl.protocol=TLSv1.2
    ssl.truststore.location=/opt/kafka/mountedconfig/es-cert.jks
    ssl.truststore.password=password
    sasl.mechanism=PLAIN
    sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required username="token" password="{{ .Values.kafkaAccess.apiKey }}";
    producer.acks=-1
    producer.security.protocol=SASL_SSL
    producer.ssl.protocol=TLSv1.2
    producer.ssl.truststore.location=/opt/kafka/mountedconfig/es-cert.jks
    producer.ssl.truststore.password=password
    producer.sasl.mechanism=PLAIN
    producer.sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required username="token" password="{{ .Values.kafkaAccess.apiKey }}";
    consumer.security.protocol=SASL_SSL
    consumer.ssl.protocol=TLSv1.2
    consumer.ssl.truststore.location=/opt/kafka/mountedconfig/es-cert.jks
    consumer.ssl.truststore.password=password
    consumer.sasl.mechanism=PLAIN
    consumer.sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required username="token" password="{{ .Values.kafkaAccess.apiKey }}";
    plugin.path=/opt/connectors

  mq-source.properties: |
    name=mq-source
    connector.class=com.ibm.eventstreams.connect.mqsource.MQSourceConnector
    tasks.max=1
    topic={{ .Values.kafkaAccess.topic }}
    mq.user.name={{ .Values.mqaccess.user }}
    mq.password={{ .Values.mqaccess.password}}
    mq.connection.mode=client
    mq.queue.manager={{ .Values.mqaccess.qmgr }}
    mq.connection.name.list={{ .Release.Name }}-ibm-mq(1414)
    mq.channel.name={{ .Values.mqaccess.channel }}
    mq.queue={{ .Values.mqaccess.qname }}
    mq.message.body.jms=true
    mq.record.builder=com.ibm.eventstreams.connect.mqsource.builders.DefaultRecordBuilder
    key.converter=org.apache.kafka.connect.storage.StringConverter
    value.converter=org.apache.kafka.connect.storage.StringConverter

  mongodb-sink.properties: |
    name=mongodb-sink
    connector.class=com.mongodb.kafka.connect.MongoSinkConnector
    topics={{ .Values.kafkaAccess.topic }}
    key.converter=org.apache.kafka.connect.storage.StringConverter
    key.converter.schemas.enable=false
    value.converter=org.apache.kafka.connect.storage.StringConverter
    value.converter.schemas.enable=false
    database=trader
    document.id.strategy=com.mongodb.kafka.connect.sink.processor.id.strategy.BsonOidStrategy
    collection=trades
    connection.uri=mongodb://{{ .Values.mongodb.mongodbUsername }}:{{ .Values.mongodb.mongodbPassword }}@{{ .Release.Name }}-mongodb:{{ .Values.mongodb.service.port }}/?authSource={{ .Values.mongodb.mongodbDatabase }}&authMechanism=SCRAM-SHA-256&w=1&journal=true

{{- end }}
